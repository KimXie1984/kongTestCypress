# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Kong CI Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write
  issues: read
  checks: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_RUN: true
    steps:
    - uses: actions/checkout@v4
  
    # - name: Install Compose
    #   uses: KengoTODA/actions-setup-docker-compose@v1
    #   with:
    #     version: '2.14.2' # the full version of `docker-compose` command
  
    # - run: docker-compose --version

    # - name: start kong dockers
    #   run: docker-compose up -d
    #- name: check kong-cp started
    # run: |
    #  sleep 30

    - name: Install Cypress
      run: |
        export DEBIAN_FRONTEND=noninteractive
        uname -a
        sudo apt update
        sudo apt-get install --yes libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libasound2 libxtst6 xauth xvfb
        sudo apt install --yes nodejs
        node -v
        npm install cypress --save-dev
        npm install mocha-junit-reporter --save-dev
        npm install ts-node --save-dev
        npm list
        npm run test
        # npx cypress run --spec "path/to/test/file" --testFilter "description"
        # npx cypress run
        
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          test-results/**/*.xml
          test-results/**/*.trx
          test-results/**/*.json

    # - uses: actions/checkout@v4
    
    # - name: Set up Python 3.10
    #   uses: actions/setup-python@v3
    #   with:
    #     python-version: "3.10"
        
    # - name: Install dependencies
    #   run: |
    #     python -m pip install --upgrade pip
    #     pip install flake8 pytest
    #     if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    #     playwright install
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    # - name: Test with pytest
    #   run: |
    #     [ -d newdir ] || mkdir allure-results
    #     pytest -v --alluredir allure-results --reruns 2 --rerun-except AssertionError

    # - name: upload playwright trace and allure report
    #   if: always()
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: artifacts
    #     path: |
    #       trace.zip
    #       allure-results

    # - name: Load test report history
    #   uses: actions/checkout@v3
    #   if: always()
    #   continue-on-error: true
    #   with:
    #     ref: gh-pages
    #     path: gh-pages

    # - name: Build test report
    #   uses: simple-elf/allure-report-action@v1.7
    #   if: always()
    #   with:
    #     gh_pages: gh-pages
    #     allure_history: allure-history
    #     allure_results: allure-results
        
    # - name: Publish test report
    #   uses: peaceiris/actions-gh-pages@v3
    #   if: always()
    #   with:
    #       github_token: ${{ secrets.GITHUB_TOKEN }}
    #       publish_branch: gh-pages
    #       publish_dir: allure-history
